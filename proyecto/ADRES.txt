# Sistema de Gestión de Adquisiciones - ADRES

Este proyecto es una aplicación web con una API backend para gestionar requisitos de adquisición.

## Requisitos

- Python 3.8+
- pip

## Instalación

1. Clona este repositorio: git clone [https://github.com/tu-usuario/sistema-adquisiciones-adres.git](https://github.com/tu-usuario/sistema-adquisiciones-adres.git)
2. Navega al directorio del proyecto: cd sistema-adquisiciones-adres
3. Instala las dependencias: pip install -r requirements.txt

## Ejecución

1. Inicia la aplicación: python app.py
2. Abr un navegador y ve a `http://localhost:5000`

## Características

- Registro de nuevas adquisiciones
- Visualización de adquisiciones existentes
- Edición de adquisiciones
- Desactivación/activación de adquisiciones
- Registro y visualización de historial de cambios para cada adquisición
- API RESTful para interactuar con el backend
- Almacenamiento de datos en SQLite

## Tecnologías Utilizadas

- Frontend: HTML, CSS, JavaScript
- Backend: Python, Flask, SQLAlchemy
- Base de datos: SQLite

## Estructura del Proyecto

/proyecto
	/api
**
    init** .py
		modelos.py
		rutas.py
	/static
		/css
			normalize.css
			styles.css
		/js
			main.js
			servicioAdquisicion.js
			servicioUI.js
			servicioValidacion.js
		/img
			logo.svg
	/templates
		index.html
	app.py
	requirements.txt
	README.md

## Contribuciones

Las contribuciones son bienvenidas. Por favor, abre un issue para discutir los cambios propuestos antes de realizar un pull request.

## Licencia

Este proyecto está bajo la Licencia MIT. Consulta el archivo `LICENSE` para más detalles.

app.py:
from flask import Flask
from flask_sqlalchemy import SQLAlchemy
from api.rutas import api
from api.modelos import db, Adquisicion, Historial

def create_app():
    app = Flask(__name__)
    app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///adquisiciones.db'
    app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False

    db.init_app(app)

    app.register_blueprint(api, url_prefix='/api')

    with app.app_context():
        db.create_all()

    return app

app = create_app()

if __name__ == '__main__':
    app.run(debug=True)

modelos.py:
from flask_sqlalchemy import SQLAlchemy
from datetime import datetime

db = SQLAlchemy()

class Adquisicion(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    presupuesto = db.Column(db.Float, nullable=False)
    unidad = db.Column(db.String(100), nullable=False)
    tipo = db.Column(db.String(100), nullable=False)
    cantidad = db.Column(db.Integer, nullable=False)
    valor_unitario = db.Column(db.Float, nullable=False)
    valor_total = db.Column(db.Float, nullable=False)
    fecha_adquisicion = db.Column(db.Date, nullable=False)
    proveedor = db.Column(db.String(100), nullable=False)
    documentacion = db.Column(db.Text)
    activo = db.Column(db.Boolean, default=True)

class Historial(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    adquisicion_id = db.Column(db.Integer, db.ForeignKey('adquisicion.id'), nullable=False)
    fecha = db.Column(db.DateTime, default=datetime.utcnow)
    accion = db.Column(db.String(50), nullable=False)
    cambios = db.Column(db.Text)

    adquisicion = db.relationship('Adquisicion', backref=db.backref('historial', lazy=True))
	
rutas.py:

import logging
from flask import Blueprint, request, jsonify
from .modelos import db, Adquisicion, Historial
from datetime import datetime

api = Blueprint('api', __name__)
logging.basicConfig(level=logging.DEBUG)

@api.route('/')
def index():
    return "Bienvenido a la API de Adquisiciones"

@api.route('/adquisiciones', methods=['GET'])
def obtener_adquisiciones():
    try:
        adquisiciones = Adquisicion.query.all()
        logging.debug(f"Obtenidas {len(adquisiciones)} adquisiciones")
        return jsonify([{
            'id': a.id,
            'presupuesto': a.presupuesto,
            'unidad': a.unidad,
            'tipo': a.tipo,
            'cantidad': a.cantidad,
            'valor_unitario': a.valor_unitario,
            'valor_total': a.valor_total,
            'fecha_adquisicion': a.fecha_adquisicion.isoformat(),
            'proveedor': a.proveedor,
            'documentacion': a.documentacion,
            'activo': a.activo
        } for a in adquisiciones])
    except Exception as e:
        logging.error(f"Error al obtener adquisiciones: {str(e)}")
        return jsonify({'error': 'Error al obtener adquisiciones'}), 500

@api.route('/adquisiciones', methods=['POST'])
def crear_adquisicion():
    datos = request.json
    logging.debug(f"Datos recibidos para crear adquisición: {datos}")
    if not datos:
        return jsonify({'error': 'No se proporcionaron datos'}), 400
    
    try:
        nueva_adquisicion = Adquisicion(
            presupuesto=datos['presupuesto'],
            unidad=datos['unidad'],
            tipo=datos['tipo'],
            cantidad=datos['cantidad'],
            valor_unitario=datos['valor_unitario'],
            valor_total=datos['cantidad'] * datos['valor_unitario'],
            fecha_adquisicion=datetime.strptime(datos['fecha_adquisicion'], '%Y-%m-%d').date(),
            proveedor=datos['proveedor'],
            documentacion=datos.get('documentacion', '')
        )
        db.session.add(nueva_adquisicion)
        db.session.commit()
        logging.debug(f"Nueva adquisición creada con ID: {nueva_adquisicion.id}")

        historial = Historial(
            adquisicion_id=nueva_adquisicion.id,
            accion='Creado',
            cambios='Adquisición inicial'
        )
        db.session.add(historial)
        db.session.commit()
        logging.debug("Historial creado para la nueva adquisición")

        return jsonify({'mensaje': 'Adquisición creada exitosamente', 'id': nueva_adquisicion.id}), 201
    except KeyError as e:
        logging.error(f"Falta el campo requerido: {str(e)}")
        return jsonify({'error': f'Falta el campo requerido: {str(e)}'}), 400
    except Exception as e:
        logging.error(f"Error al crear la adquisición: {str(e)}")
        db.session.rollback()
        return jsonify({'error': f'Error al crear la adquisición: {str(e)}'}), 500

@api.route('/adquisiciones/<int:id>', methods=['PUT'])
def actualizar_adquisicion(id):
    adquisicion = Adquisicion.query.get_or_404(id)
    datos = request.json
    logging.debug(f"Datos recibidos para actualizar adquisición {id}: {datos}")
    if not datos:
        return jsonify({'error': 'No se proporcionaron datos para actualizar'}), 400

    cambios = []

    try:
        for clave, valor in datos.items():
            if clave == 'fecha_adquisicion':
                valor = datetime.strptime(valor, '%Y-%m-%d').date()
            if hasattr(adquisicion, clave) and getattr(adquisicion, clave) != valor:
                cambios.append(f"{clave}: {getattr(adquisicion, clave)} → {valor}")
                setattr(adquisicion, clave, valor)

        if 'cantidad' in datos or 'valor_unitario' in datos:
            adquisicion.valor_total = adquisicion.cantidad * adquisicion.valor_unitario

        db.session.commit()
        logging.debug(f"Adquisición {id} actualizada")

        if cambios:
            historial = Historial(
                adquisicion_id=id,
                accion='Actualizado',
                cambios=', '.join(cambios)
            )
            db.session.add(historial)
            db.session.commit()
            logging.debug(f"Historial creado para la actualización de adquisición {id}")

        return jsonify({'mensaje': 'Adquisición actualizada exitosamente'})
    except Exception as e:
        logging.error(f"Error al actualizar la adquisición {id}: {str(e)}")
        db.session.rollback()
        return jsonify({'error': f'Error al actualizar la adquisición: {str(e)}'}), 500

@api.route('/adquisiciones/<int:id>/alternar', methods=['PUT'])
def alternar_adquisicion(id):
    try:
        adquisicion = Adquisicion.query.get_or_404(id)
        adquisicion.activo = not adquisicion.activo
        db.session.commit()
        logging.debug(f"Estado de adquisición {id} alternado a {'activo' if adquisicion.activo else 'inactivo'}")

        historial = Historial(
            adquisicion_id=id,
            accion='Activado' if adquisicion.activo else 'Desactivado',
            cambios=f"Estado cambiado a {'activo' if adquisicion.activo else 'inactivo'}"
        )
        db.session.add(historial)
        db.session.commit()
        logging.debug(f"Historial creado para el cambio de estado de adquisición {id}")

        return jsonify({'mensaje': 'Estado de la adquisición alternado exitosamente'})
    except Exception as e:
        logging.error(f"Error al alternar el estado de la adquisición {id}: {str(e)}")
        db.session.rollback()
        return jsonify({'error': f'Error al alternar el estado de la adquisición: {str(e)}'}), 500

@api.route('/adquisiciones/<int:id>/historial', methods=['GET'])
def obtener_historial_adquisicion(id):
    try:
        historial = Historial.query.filter_by(adquisicion_id=id).order_by(Historial.fecha.desc()).all()
        logging.debug(f"Obtenido historial para adquisición {id}: {len(historial)} entradas")
        return jsonify([{
            'fecha': h.fecha.isoformat(),
            'accion': h.accion,
            'cambios': h.cambios
        } for h in historial])
    except Exception as e:
        logging.error(f"Error al obtener el historial de la adquisición {id}: {str(e)}")
        return jsonify({'error': f'Error al obtener el historial de la adquisición: {str(e)}'}), 500

@api.errorhandler(404)
def recurso_no_encontrado(error):
    logging.error(f"Recurso no encontrado: {request.url}")
    return jsonify({'error': 'Recurso no encontrado'}), 404

@api.errorhandler(500)
def error_interno_servidor(error):
    logging.error(f"Error interno del servidor: {str(error)}")
    return jsonify({'error': 'Error interno del servidor'}), 500

main.js:
document.addEventListener('DOMContentLoaded', function() {
    UI.inicializarEventListeners();
    UI.actualizarListaAdquisiciones();
});

servicioAdquisicion.js:

const ServicioAdquisicion = {
    async cargarAdquisiciones() {
        const respuesta = await fetch('/api/adquisiciones');
        return await respuesta.json();
    },

    async agregarAdquisicion(adquisicion) {
        const respuesta = await fetch('/api/adquisiciones', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify(adquisicion),
        });
        return await respuesta.json();
    },

    async actualizarAdquisicion(id, adquisicionActualizada) {
        const respuesta = await fetch(`/api/adquisiciones/${id}`, {
            method: 'PUT',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify(adquisicionActualizada),
        });
        return await respuesta.json();
    },

    async alternarAdquisicion(id) {
        const respuesta = await fetch(`/api/adquisiciones/${id}/alternar`, {
            method: 'PUT',
        });
        return await respuesta.json();
    },

    async obtenerHistorialAdquisicion(id) {
        const respuesta = await fetch(`/api/adquisiciones/${id}/historial`);
        return await respuesta.json();
    }
};

servicioUI.js
const UI = {
    inicializarEventListeners() {
        document.getElementById('lista-adquisiciones').addEventListener('click', async function(e) {
            if (e.target.classList.contains('btn-editar')) {
                const id = parseInt(e.target.dataset.id);
                await UI.mostrarModalEdicion(id);
            } else if (e.target.classList.contains('btn-alternar')) {
                const id = parseInt(e.target.dataset.id);
                await ServicioAdquisicion.alternarAdquisicion(id);
                await UI.actualizarListaAdquisiciones();
            }
        });

        document.querySelector('.cerrar').addEventListener('click', UI.cerrarModal);
        window.addEventListener('click', function(e) {
            if (e.target === document.getElementById('modal')) {
                UI.cerrarModal();
            }
        });

        document.getElementById('nav-crear').addEventListener('click', function(e) {
            e.preventDefault();
            UI.mostrarSeccion('seccion-formulario');
        });

        document.getElementById('nav-listar').addEventListener('click', function(e) {
            e.preventDefault();
            UI.mostrarSeccion('seccion-lista');
        });

        document.getElementById('formulario-adquisicion').addEventListener('submit', async function(e) {
            e.preventDefault();
            if (ServicioValidacion.validarFormulario(this)) {
                const formData = new FormData(this);
                const adquisicion = Object.fromEntries(formData.entries());
                await ServicioAdquisicion.agregarAdquisicion(adquisicion);
                await UI.actualizarListaAdquisiciones();
                this.reset();
                UI.mostrarSeccion('seccion-lista');
            }
        });

        document.getElementById('busqueda').addEventListener('input', UI.actualizarListaAdquisiciones);
        document.getElementById('filtro-estado').addEventListener('change', UI.actualizarListaAdquisiciones);
    },

    mostrarSeccion(seccionId) {
        document.querySelectorAll('main > section').forEach(section => {
            section.classList.add('oculto');
        });
        document.getElementById(seccionId).classList.remove('oculto');
    },

    async actualizarListaAdquisiciones() {
        const tbody = document.getElementById('lista-adquisiciones');
        const busqueda = document.getElementById('busqueda').value.toLowerCase();
        const estado = document.getElementById('filtro-estado').value;
        const adquisiciones = await ServicioAdquisicion.cargarAdquisiciones();
        
        tbody.innerHTML = '';
        adquisiciones.forEach(adq => {
            if ((estado === 'todos' || 
                (estado === 'activos' && adq.activo) || 
                (estado === 'inactivos' && !adq.activo)) &&
                Object.values(adq).some(valor => String(valor).toLowerCase().includes(busqueda))) {
                const tr = document.createElement('tr');
                tr.innerHTML = `
                    <td>${adq.tipo}</td>
                    <td>$${adq.presupuesto}</td>
                    <td>${adq.unidad}</td>
                    <td>${adq.cantidad}</td>
                    <td>$${adq.valor_total}</td>
                    <td>${adq.fecha_adquisicion}</td>
                    <td>${adq.proveedor}</td>
                    <td>
                        <button class="btn-editar" data-id="${adq.id}">Editar</button>
                        <button class="btn-alternar" data-id="${adq.id}">${adq.activo ? 'Desactivar' : 'Activar'}</button>
                    </td>
                `;
                tbody.appendChild(tr);
            }
        });
    },

    async mostrarModalEdicion(id) {
        const adquisiciones = await ServicioAdquisicion.cargarAdquisiciones();
        const adquisicion = adquisiciones.find(a => a.id === id);
        if (adquisicion) {
            document.getElementById('titulo-modal').textContent = 'Editar Adquisición';
            document.getElementById('cuerpo-modal').innerHTML = `
                <form id="formulario-edicion">
                    <input type="hidden" name="id" value="${adquisicion.id}">
                    <div class="grupo-formulario">
                        <label for="editar-presupuesto">Presupuesto:</label>
                        <input type="number" id="editar-presupuesto" name="presupuesto" value="${adquisicion.presupuesto}" required>
                    </div>
                    <div class="grupo-formulario">
                        <label for="editar-unidad">Unidad Administrativa:</label>
                        <input type="text" id="editar-unidad" name="unidad" value="${adquisicion.unidad}" required>
                    </div>
                    <div class="grupo-formulario">
                        <label for="editar-tipo">Tipo de Bien o Servicio:</label>
                        <input type="text" id="editar-tipo" name="tipo" value="${adquisicion.tipo}" required>
                    </div>
                    <div class="grupo-formulario">
                        <label for="editar-cantidad">Cantidad:</label>
                        <input type="number" id="editar-cantidad" name="cantidad" value="${adquisicion.cantidad}" required>
                    </div>
                    <div class="grupo-formulario">
                        <label for="editar-valor-unitario">Valor Unitario:</label>
                        <input type="number" id="editar-valor-unitario" name="valor_unitario" value="${adquisicion.valor_unitario}" required>
                    </div>
                    <div class="grupo-formulario">
                        <label for="editar-fecha-adquisicion">Fecha de Adquisición:</label>
                        <input type="date" id="editar-fecha-adquisicion" name="fecha_adquisicion" value="${adquisicion.fecha_adquisicion}" required>
                    </div>
                    <div class="grupo-formulario">
                        <label for="editar-proveedor">Proveedor:</label>
                        <input type="text" id="editar-proveedor" name="proveedor" value="${adquisicion.proveedor}" required>
                    </div>
                    <div class="grupo-formulario">
                        <label for="editar-documentacion">Documentación:</label>
                        <textarea id="editar-documentacion" name="documentacion">${adquisicion.documentacion}</textarea>
                    </div>
                    <button type="submit">Actualizar</button>
                </form>
                <h3>Historial de Cambios</h3>
                <ul id="lista-historial"></ul>
            `;
            document.getElementById('modal').style.display = 'block';
            document.getElementById('formulario-edicion').addEventListener('submit', this.manejarEnvioEdicion);
            await this.actualizarListaHistorial(id);
        }
    },

    async actualizarListaHistorial(id) {
        const listaHistorial = document.getElementById('lista-historial');
        const historial = await ServicioAdquisicion.obtenerHistorialAdquisicion(id);
        listaHistorial.innerHTML = '';
        historial.forEach(entrada => {
            const li = document.createElement('li');
            li.innerHTML = `
                <strong>${new Date(entrada.fecha).toLocaleString()}</strong> - ${entrada.accion}<br>
                <em>${entrada.cambios}</em>
            `;
            listaHistorial.appendChild(li);
        });
    },

    async manejarEnvioEdicion(e) {
        e.preventDefault();
        if (ServicioValidacion.validarFormulario(e.target)) {
            const formData = new FormData(e.target);
            const adquisicionActualizada = Object.fromEntries(formData.entries());
            await ServicioAdquisicion.actualizarAdquisicion(adquisicionActualizada.id, adquisicionActualizada);
            UI.cerrarModal();
            await UI.actualizarListaAdquisiciones();
        }
    },

    cerrarModal() {
        document.getElementById('modal').style.display = 'none';
    }
};

servicioValidacion.js:

const ServicioValidacion = {
    validarFormulario(formulario) {
        let esValido = true;
        const inputs = formulario.querySelectorAll('input, textarea');
        
        inputs.forEach(input => {
            if (input.hasAttribute('required') && !input.value.trim()) {
                this.mostrarError(input, 'Este campo es requerido');
                esValido = false;
            } else {
                this.limpiarError(input);
            }

            if (input.type === 'number' && input.value && parseFloat(input.value) <= 0) {
                this.mostrarError(input, 'Debe ser un número positivo');
                esValido = false;
            }

            if (input.type === 'date' && input.value) {
                const fechaSeleccionada = new Date(input.value);
                const hoy = new Date();
                if (fechaSeleccionada > hoy) {
                    this.mostrarError(input, 'La fecha no puede ser futura');
                    esValido = false;
                }
            }
        });

        return esValido;
    },

    mostrarError(input, mensaje) {
        this.limpiarError(input);
        const elementoError = document.createElement('div');
        elementoError.className = 'error';
        elementoError.textContent = mensaje;
        input.parentNode.appendChild(elementoError);
        input.classList.add('input-error');
    },

    limpiarError(input) {
        const elementoError = input.parentNode.querySelector('.error');
        if (elementoError) {
            elementoError.remove();
        }
        input.classList.remove('input-error');
    }
};

index.html:
<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Sistema de Gestión de Adquisiciones - ADRES</title>
    <link rel="stylesheet" href="/static/css/normalize.css">
    <link rel="stylesheet" href="/static/css/styles.css">
    <link rel="icon" href="/static/img/logo.png" type="image/png+xml">
</head>
<body>
    <header>
        <img src="/static/img/logo.png" alt="Logo ADRES" class="logo">
        <h1>Sistema de Gestión de Adquisiciones</h1>
    </header>
    <nav>
        <ul>
            <li><a href="#" id="nav-crear">Crear Adquisición</a></li>
            <li><a href="#" id="nav-listar">Listar Adquisiciones</a></li>
        </ul>
    </nav>
    <main>
        <section id="seccion-formulario" class="oculto">
            <h2>Registro de Adquisición</h2>
            <form id="formulario-adquisicion">
                <div class="grupo-formulario">
                    <label for="presupuesto">Presupuesto:</label>
                    <input type="number" id="presupuesto" name="presupuesto" required>
                </div>
                <div class="grupo-formulario">
                    <label for="unidad">Unidad Administrativa:</label>
                    <input type="text" id="unidad" name="unidad" required>
                </div>
                <div class="grupo-formulario">
                    <label for="tipo">Tipo de Bien o Servicio:</label>
                    <input type="text" id="tipo" name="tipo" required>
                </div>
                <div class="grupo-formulario">
                    <label for="cantidad">Cantidad:</label>
                    <input type="number" id="cantidad" name="cantidad" required>
                </div>
                <div class="grupo-formulario">
                    <label for="valor-unitario">Valor Unitario:</label>
                    <input type="number" id="valor-unitario" name="valor_unitario" required>
                </div>
                <div class="grupo-formulario">
                    <label for="fecha-adquisicion">Fecha de Adquisición:</label>
                    <input type="date" id="fecha-adquisicion" name="fecha_adquisicion" required>
                </div>
                <div class="grupo-formulario">
                    <label for="proveedor">Proveedor:</label>
                    <input type="text" id="proveedor" name="proveedor" required>
                </div>
                <div class="grupo-formulario">
                    <label for="documentacion">Documentación:</label>
                    <textarea id="documentacion" name="documentacion"></textarea>
                </div>
                <button type="submit">Registrar</button>
            </form>
        </section>
        <section id="seccion-lista">
            <h2>Lista de Adquisiciones</h2>
            <div id="filtros">
                <input type="text" id="busqueda" placeholder="Buscar...">
                <select id="filtro-estado">
                    <option value="todos">Todos</option>
                    <option value="activos">Activos</option>
                    <option value="inactivos">Inactivos</option>
                </select>
            </div>
            <table id="tabla-adquisiciones">
                <thead>
                    <tr>
                        <th>Tipo</th>
                        <th>Presupuesto</th>
                        <th>Unidad</th>
                        <th>Cantidad</th>
                        <th>Valor Total</th>
                        <th>Fecha</th>
                        <th>Proveedor</th>
                        <th>Acciones</th>
                    </tr>
                </thead>
                <tbody id="lista-adquisiciones"></tbody>
            </table>
        </section>
    </main>
    <div id="modal" class="modal">
        <div class="contenido-modal">
            <span class="cerrar">&times;</span>
            <h2 id="titulo-modal"></h2>
            <div id="cuerpo-modal"></div>
        </div>
    </div>
    
    <script src="/static/js/servicioAdquisicion.js"></script>
    <script src="/static/js/servicioUI.js"></script>
    <script src="/static/js/servicioValidacion.js"></script>
    <script src="/static/js/main.js"></script>
</body>
</html>